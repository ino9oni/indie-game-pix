// Boolean matrices for each level. true = filled, false = empty

export const LEVELS = ['easy', 'middle', 'high', 'hard', 'ultra']

const E = true
const _ = false

// 5x5 puzzles (easy) — 5 puzzles
const EASY = [
  // Heart
  [
    [_, E, _, E, _],
    [E, E, E, E, E],
    [E, E, E, E, E],
    [_, E, E, E, _],
    [_, _, E, _, _],
  ],
  // Smiley
  [
    [_, E, _, E, _],
    [_, E, _, E, _],
    [_, _, _, _, _],
    [E, _, _, _, E],
    [_, E, E, E, _],
  ],
  // Plus
  [
    [_, _, E, _, _],
    [_, _, E, _, _],
    [E, E, E, E, E],
    [_, _, E, _, _],
    [_, _, E, _, _],
  ],
  // Arrow
  [
    [_, _, E, _, _],
    [_, E, E, E, _],
    [E, _, E, _, E],
    [_, _, E, _, _],
    [_, _, E, _, _],
  ],
  // X
  [
    [E, _, _, _, E],
    [_, E, _, E, _],
    [_, _, E, _, _],
    [_, E, _, E, _],
    [E, _, _, _, E],
  ],
]

// 10x10 puzzles (middle) — 5 puzzles
const MIDDLE = [
  // Space Invader
  [
    [_, _, E, E, _, _, E, E, _, _],
    [_, E, E, E, E, E, E, E, E, _],
    [E, E, _, E, E, E, E, _, E, E],
    [E, E, E, E, E, E, E, E, E, E],
    [E, _, E, _, _, _, _, E, _, E],
    [E, E, E, E, E, E, E, E, E, E],
    [_, _, E, _, _, _, _, E, _, _],
    [_, E, _, E, _, _, E, _, E, _],
    [E, _, _, _, E, E, _, _, _, E],
    [_, E, E, E, _, _, E, E, E, _],
  ],
  // Diamond
  [
    [_, _, _, _, E, _, _, _, _, _],
    [_, _, _, E, E, E, _, _, _, _],
    [_, _, E, E, E, E, E, _, _, _],
    [_, E, E, E, E, E, E, E, _, _],
    [E, E, E, E, E, E, E, E, E, _],
    [_, E, E, E, E, E, E, E, _, _],
    [_, _, E, E, E, E, E, _, _, _],
    [_, _, _, E, E, E, _, _, _, _],
    [_, _, _, _, E, _, _, _, _, _],
    [_, _, _, _, _, _, _, _, _, _],
  ],
  // Musical Note
  [
    [_, _, _, _, _, _, _, _, _, _],
    [_, _, _, E, E, E, _, _, _, _],
    [_, _, _, E, E, E, _, _, _, _],
    [_, _, _, E, E, E, _, _, _, _],
    [_, _, _, E, E, E, E, E, _, _],
    [_, _, _, E, _, _, _, E, _, _],
    [_, _, _, E, _, _, _, E, _, _],
    [_, _, E, E, _, _, _, E, _, _],
    [_, E, _, E, _, _, _, E, _, _],
    [E, _, _, E, E, E, E, E, _, _],
  ],
  // Spiral
  [
    [E, E, E, E, E, E, E, E, E, E],
    [E, _, _, _, _, _, _, _, _, E],
    [E, _, E, E, E, E, E, E, _, E],
    [E, _, E, _, _, _, _, E, _, E],
    [E, _, E, _, E, E, _, E, _, E],
    [E, _, E, _, E, _, _, E, _, E],
    [E, _, E, _, E, E, E, E, _, E],
    [E, _, E, _, _, _, _, _, _, E],
    [E, _, E, E, E, E, E, E, E, E],
    [E, E, E, E, E, E, E, E, E, E],
  ],
  // Star
  [
    [_, _, _, _, E, _, _, _, _, _],
    [_, _, _, E, E, E, _, _, _, _],
    [_, _, E, _, E, _, E, _, _, _],
    [_, E, _, E, E, E, _, E, _, _],
    [E, E, E, E, E, E, E, E, E, _],
    [_, E, _, E, E, E, _, E, _, _],
    [_, _, E, _, E, _, E, _, _, _],
    [_, _, _, E, E, E, _, _, _, _],
    [_, _, _, _, E, _, _, _, _, _],
    [_, _, _, _, _, _, _, _, _, _],
  ],
]

// 15x15 puzzles (high) — 5 puzzles
const HIGH = [
  // Big Heart
  [
    [_, _, _, E, E, _, _, _, _, E, E, _, _, _, _],
    [_, _, E, E, E, E, _, _, _, E, E, E, E, _, _],
    [_, E, E, E, E, E, E, _, E, E, E, E, E, E, _],
    [E, E, E, E, E, E, E, E, E, E, E, E, E, E, E],
    [E, E, E, E, E, E, E, E, E, E, E, E, E, E, E],
    [E, E, E, E, E, E, E, E, E, E, E, E, E, E, E],
    [_, E, E, E, E, E, E, E, E, E, E, E, E, E, _],
    [_, _, E, E, E, E, E, E, E, E, E, E, E, _, _],
    [_, _, _, E, E, E, E, E, E, E, E, E, _, _, _],
    [_, _, _, _, E, E, E, E, E, E, E, _, _, _, _],
    [_, _, _, _, _, E, E, E, E, E, _, _, _, _, _],
    [_, _, _, _, _, _, E, E, E, _, _, _, _, _, _],
    [_, _, _, _, _, _, _, E, _, _, _, _, _, _, _],
    [_, _, _, _, _, _, _, _, _, _, _, _, _, _, _],
    [_, _, _, _, _, _, _, _, _, _, _, _, _, _, _],
  ],
  // Cat
  [
    [_, _, _, _, _, _, E, E, _, _, _, _, _, _, _],
    [_, _, _, _, _, E, E, E, E, _, _, _, _, _, _],
    [_, _, _, _, E, E, E, E, E, E, _, _, _, _, _],
    [_, _, _, E, E, _, E, E, _, E, E, _, _, _, _],
    [_, _, E, E, E, E, E, E, E, E, E, E, _, _, _],
    [_, _, E, _, E, E, E, E, E, E, E, _, E, _, _],
    [_, E, E, _, _, _, E, E, E, _, _, _, E, E, _],
    [E, E, E, E, E, E, E, E, E, E, E, E, E, E, E],
    [E, _, _, E, _, _, _, E, _, _, _, E, _, _, E],
    [E, E, E, E, E, E, E, E, E, E, E, E, E, E, E],
    [_, E, _, _, _, _, E, E, E, _, _, _, _, E, _],
    [_, _, E, E, E, E, _, _, _, E, E, E, E, _, _],
    [_, _, _, _, _, E, E, E, E, E, _, _, _, _, _],
    [_, _, _, _, E, E, E, E, E, E, E, _, _, _, _],
    [_, _, _, E, E, E, E, E, E, E, E, E, _, _, _],
  ],
  // Treble clef-ish
  [
    [_, _, _, _, _, _, _, E, _, _, _, _, _, _, _],
    [_, _, _, _, _, _, E, E, _, _, _, _, _, _, _],
    [_, _, _, _, _, E, E, E, _, _, _, _, _, _, _],
    [_, _, _, _, E, E, E, E, _, _, _, _, _, _, _],
    [_, _, _, E, E, E, E, E, _, _, _, _, _, _, _],
    [_, _, E, _, _, E, E, _, _, _, _, _, _, _, _],
    [_, E, _, _, _, E, _, _, _, _, _, _, _, _, _],
    [E, _, _, _, E, E, E, E, E, _, _, _, _, _, _],
    [_, _, _, _, _, _, _, _, E, _, _, _, _, _, _],
    [_, _, _, _, _, _, _, E, E, _, _, _, _, _, _],
    [_, _, _, _, _, _, E, E, _, _, _, _, _, _, _],
    [_, _, _, _, _, E, E, _, _, _, _, _, _, _, _],
    [_, _, _, _, E, E, _, _, _, _, _, _, _, _, _],
    [_, _, _, E, E, _, _, _, _, _, _, _, _, _, _],
    [_, _, E, E, _, _, _, _, _, _, _, _, _, _, _],
  ],
  // Big X
  [
    [E, _, _, _, _, _, _, _, _, _, _, _, _, _, E],
    [_, E, _, _, _, _, _, _, _, _, _, _, _, E, _],
    [_, _, E, _, _, _, _, _, _, _, _, _, E, _, _],
    [_, _, _, E, _, _, _, _, _, _, _, E, _, _, _],
    [_, _, _, _, E, _, _, _, _, _, E, _, _, _, _],
    [_, _, _, _, _, E, _, _, _, E, _, _, _, _, _],
    [_, _, _, _, _, _, E, _, E, _, _, _, _, _, _],
    [_, _, _, _, _, _, _, E, _, _, _, _, _, _, _],
    [_, _, _, _, _, _, E, _, E, _, _, _, _, _, _],
    [_, _, _, _, _, E, _, _, _, E, _, _, _, _, _],
    [_, _, _, _, E, _, _, _, _, _, E, _, _, _, _],
    [_, _, _, E, _, _, _, _, _, _, _, E, _, _, _],
    [_, _, E, _, _, _, _, _, _, _, _, _, E, _, _],
    [_, E, _, _, _, _, _, _, _, _, _, _, _, E, _],
    [E, _, _, _, _, _, _, _, _, _, _, _, _, _, E],
  ],
  // Checker heart
  [
    [_, _, E, E, _, _, _, _, E, E, _, _, _, _, _],
    [_, E, _, _, E, _, _, E, _, _, E, _, _, _, _],
    [E, _, _, _, _, E, E, _, _, _, _, E, _, _, _],
    [E, _, E, E, _, _, _, _, _, E, E, _, E, _, _],
    [_, E, _, _, E, _, _, _, E, _, _, E, _, E, _],
    [_, _, E, E, _, E, E, _, _, E, E, _, E, _, _],
    [_, _, _, _, E, _, _, E, _, _, _, E, _, _, _],
    [_, _, _, _, _, E, E, E, E, E, _, _, _, _, _],
    [_, _, _, _, E, _, _, E, _, _, _, E, _, _, _],
    [_, _, E, E, _, E, E, _, _, E, E, _, E, _, _],
    [_, E, _, _, E, _, _, _, E, _, _, E, _, E, _],
    [E, _, E, E, _, _, _, _, _, E, E, _, E, _, _],
    [E, _, _, _, _, E, E, _, _, _, _, E, _, _, _],
    [_, E, _, _, E, _, _, E, _, _, E, _, _, _, _],
    [_, _, E, E, _, _, _, _, E, E, _, _, _, _, _],
  ],
]

// 20x20 puzzles (hard) — 3 puzzles
const HARD20 = [
  // Phoenix wings
  [
    [_, _, _, _, _, _, _, _, E, E, E, E, _, _, _, _, _, _, _, _],
    [_, _, _, _, _, _, _, E, E, E, E, E, E, _, _, _, _, _, _, _],
    [_, _, _, _, _, _, E, E, _, E, E, _, E, E, _, _, _, _, _, _],
    [_, _, _, _, _, E, E, _, E, E, E, E, _, E, E, _, _, _, _, _],
    [_, _, _, _, E, E, _, E, _, _, _, _, E, _, E, E, _, _, _, _],
    [_, _, _, E, E, _, E, _, E, E, E, E, _, E, _, E, E, _, _, _],
    [_, _, E, E, _, E, _, E, _, _, _, _, E, _, E, _, E, E, _, _],
    [_, E, E, _, E, _, E, _, E, E, E, E, _, E, _, E, _, E, E, _],
    [E, E, _, E, _, E, _, E, _, _, _, _, E, _, E, _, E, _, E, E],
    [E, E, E, E, E, E, E, E, E, _, _, E, E, E, E, E, E, E, E, E],
    [E, E, _, E, _, E, _, E, _, _, _, _, E, _, E, _, E, _, E, E],
    [_, E, E, _, E, _, E, _, E, E, E, E, _, E, _, E, _, E, E, _],
    [_, _, E, E, _, E, _, E, _, _, _, _, E, _, E, _, E, E, _, _],
    [_, _, _, E, E, _, E, _, E, E, E, E, _, E, _, E, E, _, _, _],
    [_, _, _, _, E, E, _, E, _, _, _, _, E, _, E, E, _, _, _, _],
    [_, _, _, _, _, E, E, _, E, E, E, E, _, E, E, _, _, _, _, _],
    [_, _, _, _, _, _, E, E, _, E, E, _, E, E, _, _, _, _, _, _],
    [_, _, _, _, _, _, _, E, E, E, E, E, E, _, _, _, _, _, _, _],
    [_, _, _, _, _, _, _, _, E, E, E, E, _, _, _, _, _, _, _, _],
    [_, _, _, _, _, _, _, _, _, _, E, _, _, _, _, _, _, _, _, _],
  ],
  // Dragon curve-ish
  [
    [_, _, _, _, _, E, E, E, E, E, E, E, E, E, _, _, _, _, _, _],
    [_, _, _, _, E, _, _, _, _, _, _, _, _, _, _, E, _, _, _, _],
    [_, _, _, E, _, E, E, E, E, E, E, E, E, _, _, _, E, _, _, _],
    [_, _, E, _, E, _, _, _, _, _, _, _, E, _, _, _, _, E, _, _],
    [_, E, _, E, _, E, E, E, E, E, E, E, _, E, _, _, _, _, E, _],
    [E, _, E, _, E, _, _, _, _, _, _, E, _, _, E, _, _, _, _, E],
    [E, _, _, E, _, E, E, E, E, E, E, _, _, E, _, E, E, E, _, E],
    [E, _, _, _, E, _, _, _, _, _, E, _, E, _, E, _, _, _, _, E],
    [E, _, _, _, _, E, E, E, E, E, _, E, _, E, _, E, E, E, _, E],
    [E, _, _, _, _, _, _, _, _, E, _, E, _, E, _, _, _, _, _, E],
    [E, _, _, _, _, _, _, _, E, _, E, _, E, _, E, _, _, _, _, E],
    [E, _, _, _, _, _, _, E, _, E, _, E, _, E, _, E, _, _, _, E],
    [E, _, _, _, _, _, E, _, _, _, _, _, _, _, _, E, _, _, _, E],
    [E, _, _, _, _, E, _, _, _, _, _, _, _, _, _, _, E, _, _, E],
    [E, _, _, _, E, _, _, _, _, _, _, _, _, _, _, _, _, E, _, E],
    [E, _, _, E, _, _, _, _, _, _, _, _, _, _, _, _, _, _, E, E],
    [E, _, E, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, E],
    [E, E, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, E],
    [E, E, E, E, E, E, E, E, E, E, E, E, E, E, E, E, E, E, E, E],
    [_, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _],
  ],
  // Crown
  [
    [_, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _],
    [_, _, _, _, E, _, _, _, _, _, _, _, _, _, _, E, _, _, _, _],
    [_, _, _, E, _, E, _, _, _, _, _, _, _, _, E, _, E, _, _, _],
    [_, _, E, _, _, _, E, _, _, _, _, _, _, E, _, _, _, E, _, _],
    [_, E, _, _, _, _, _, E, _, _, _, _, E, _, _, _, _, _, E, _],
    [E, E, E, E, E, E, E, E, E, _, _, E, E, E, E, E, E, E, E, E],
    [_, _, _, _, _, _, _, _, E, E, E, E, _, _, _, _, _, _, _, _],
    [_, _, _, _, _, _, _, E, _, _, _, _, E, _, _, _, _, _, _, _],
    [_, _, _, _, _, _, E, _, _, _, _, _, _, E, _, _, _, _, _, _],
    [_, _, _, _, _, E, _, _, _, _, _, _, _, _, E, _, _, _, _, _],
    [_, _, _, _, E, _, _, _, _, _, _, _, _, _, _, E, _, _, _, _],
    [_, _, _, E, _, _, _, _, _, _, _, _, _, _, _, _, E, _, _, _],
    [_, _, E, _, _, _, _, _, _, _, _, _, _, _, _, _, _, E, _, _],
    [_, E, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, E, _],
    [E, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, E],
    [E, E, E, E, E, E, E, E, E, E, E, E, E, E, E, E, E, E, E, E],
    [_, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _],
    [_, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _],
    [_, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _],
    [_, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _],
  ],
]

// 25x25 puzzles (ultra) — 2 puzzles
const ULTRA25 = [
  // Lotus emblem
  [
    [_, _, _, _, _, _, _, _, _, _, _, E, _, _, _, _, _, _, _, _, _, _, _, _, _],
    [_, _, _, _, _, _, _, _, _, _, E, E, E, _, _, _, _, _, _, _, _, _, _, _, _],
    [_, _, _, _, _, _, _, _, _, E, _, E, _, E, _, _, _, _, _, _, _, _, _, _, _],
    [_, _, _, _, _, _, _, _, E, _, E, E, E, _, E, _, _, _, _, _, _, _, _, _, _],
    [_, _, _, _, _, _, _, E, _, E, _, E, E, E, _, E, _, _, _, _, _, _, _, _, _],
    [_, _, _, _, _, _, E, _, E, _, E, _, E, _, E, _, E, _, _, _, _, _, _, _, _],
    [_, _, _, _, _, E, _, E, _, E, _, E, _, E, _, E, _, E, _, _, _, _, _, _, _],
    [_, _, _, _, E, _, E, _, E, _, E, _, E, _, E, _, E, _, E, _, _, _, _, _, _],
    [_, _, _, E, _, E, _, E, _, E, _, E, _, E, _, E, _, E, _, E, _, _, _, _, _],
    [_, _, E, _, E, _, E, _, E, _, E, _, E, _, E, _, E, _, E, _, E, _, _, _, _],
    [_, E, _, E, _, E, _, E, _, E, _, E, _, E, _, E, _, E, _, E, _, E, _, _, _],
    [E, _, _, _, _, _, _, _, _, _, _, E, _, _, _, _, _, _, _, _, _, _, _, _, E],
    [_, E, _, E, _, E, _, E, _, E, _, E, _, E, _, E, _, E, _, E, _, E, _, _, _],
    [_, _, E, _, E, _, E, _, E, _, E, _, E, _, E, _, E, _, E, _, E, _, _, _, _],
    [_, _, _, E, _, E, _, E, _, E, _, E, _, E, _, E, _, E, _, E, _, _, _, _, _],
    [_, _, _, _, E, _, E, _, E, _, E, _, E, _, E, _, E, _, E, _, _, _, _, _, _],
    [_, _, _, _, _, E, _, E, _, E, _, E, _, E, _, E, _, E, _, _, _, _, _, _, _],
    [_, _, _, _, _, _, E, _, E, _, E, _, E, _, E, _, E, _, _, _, _, _, _, _, _],
    [_, _, _, _, _, _, _, E, _, E, _, E, _, E, _, E, _, _, _, _, _, _, _, _, _],
    [_, _, _, _, _, _, _, _, E, _, E, _, E, _, E, _, _, _, _, _, _, _, _, _, _],
    [_, _, _, _, _, _, _, _, _, E, _, E, _, E, _, _, _, _, _, _, _, _, _, _, _],
    [_, _, _, _, _, _, _, _, _, _, E, E, E, _, _, _, _, _, _, _, _, _, _, _, _],
    [_, _, _, _, _, _, _, _, _, _, _, E, _, _, _, _, _, _, _, _, _, _, _, _, _],
    [_, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _],
    [_, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _],
  ],
  // Complex starburst
  [
    [_, _, _, _, _, _, _, _, _, _, _, _, E, _, _, _, _, _, _, _, _, _, _, _, _],
    [_, _, _, _, _, _, _, _, _, _, _, E, E, E, _, _, _, _, _, _, _, _, _, _, _],
    [_, _, _, _, _, _, _, _, _, _, E, _, E, _, E, _, _, _, _, _, _, _, _, _, _],
    [_, _, _, _, _, _, _, _, _, E, _, _, E, _, _, E, _, _, _, _, _, _, _, _, _],
    [_, _, _, _, _, _, _, _, E, _, _, _, E, _, _, _, E, _, _, _, _, _, _, _, _],
    [_, _, _, _, _, _, _, E, _, _, _, _, E, _, _, _, _, E, _, _, _, _, _, _, _],
    [_, _, _, _, _, _, E, _, _, _, _, _, E, _, _, _, _, _, E, _, _, _, _, _, _],
    [_, _, _, _, _, E, _, _, _, _, _, _, E, _, _, _, _, _, _, E, _, _, _, _, _],
    [_, _, _, _, E, _, _, _, _, _, _, _, E, _, _, _, _, _, _, _, E, _, _, _, _],
    [_, _, _, E, _, _, _, _, _, _, _, _, E, _, _, _, _, _, _, _, _, E, _, _, _],
    [_, _, E, _, _, _, _, _, _, _, _, _, E, _, _, _, _, _, _, _, _, _, E, _, _],
    [_, E, _, _, _, _, _, _, _, _, _, _, E, _, _, _, _, _, _, _, _, _, _, E, _],
    [E, E, E, E, E, E, E, E, E, E, E, E, E, E, E, E, E, E, E, E, E, E, E, E, E],
    [_, E, _, _, _, _, _, _, _, _, _, _, E, _, _, _, _, _, _, _, _, _, _, E, _],
    [_, _, E, _, _, _, _, _, _, _, _, _, E, _, _, _, _, _, _, _, _, _, E, _, _],
    [_, _, _, E, _, _, _, _, _, _, _, _, E, _, _, _, _, _, _, _, _, E, _, _, _],
    [_, _, _, _, E, _, _, _, _, _, _, _, E, _, _, _, _, _, _, _, E, _, _, _, _],
    [_, _, _, _, _, E, _, _, _, _, _, _, E, _, _, _, _, _, _, E, _, _, _, _, _],
    [_, _, _, _, _, _, E, _, _, _, _, _, E, _, _, _, _, _, E, _, _, _, _, _, _],
    [_, _, _, _, _, _, _, E, _, _, _, _, E, _, _, _, _, E, _, _, _, _, _, _, _],
    [_, _, _, _, _, _, _, _, E, _, _, _, E, _, _, _, E, _, _, _, _, _, _, _, _],
    [_, _, _, _, _, _, _, _, _, E, _, _, E, _, _, E, _, _, _, _, _, _, _, _, _],
    [_, _, _, _, _, _, _, _, _, _, E, _, E, _, E, _, _, _, _, _, _, _, _, _, _],
    [_, _, _, _, _, _, _, _, _, _, _, E, E, E, _, _, _, _, _, _, _, _, _, _, _],
    [_, _, _, _, _, _, _, _, _, _, _, _, E, _, _, _, _, _, _, _, _, _, _, _, _],
  ],
]

export const PUZZLES = { easy: EASY, middle: MIDDLE, high: HIGH, hard: HARD20, ultra: ULTRA25 }

export const PUZZLES_BY_SIZE = { 5: EASY, 10: MIDDLE, 15: HIGH, 20: HARD20, 25: ULTRA25 }

export function getPuzzlesForSize(n) { return PUZZLES_BY_SIZE[n] || [] }
export function getRandomPuzzleForSize(n) {
  const arr = getPuzzlesForSize(n)
  if (!arr.length) return null
  const idx = Math.floor(Math.random() * arr.length)
  return arr[idx]
}
